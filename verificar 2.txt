.agenda-table td {
  background-color: white;
  color: black;
 /* min-height: 14px;
  font-size: 11px;*/
/*    padding: 2px 4px;*/
  /*min-height: 20px; *//* define a altura mínima */
       /* força altura padrão mais baixa */
  height: 8px;        
  vertical-align: top;
  /*font-size: 12px;*/   /* reduz fonte, opcional */
}

.agenda-wrapper {
  overflow-x: auto;
  width: 100%;
}

.agenda-table {
  border-collapse: collapse;
  width: 100%;
  min-width: 800px;
}

.agenda-table th, .agenda-table td {
  border: 1px solid #ccc;
  padding: 4px;
  text-align: center;
}

.agenda-table th {
  background-color: #1565c0;
  color: white;
}

.hour-label {
  background-color: #f0f0f0;
  text-align: center;
  vertical-align: middle;
  font-weight: bold;
}
/*
.hour-label {
  background-color: #f1f1f1;
  font-weight: bold;
  vertical-align: top;
  text-align: right;
  padding-right: 8px;
  font-size: 14px;
}*/

/* Grade de 10 em 10 minutos */
/*
.cell {
  cursor: pointer;
  height: 14px;
  vertical-align: top;
  background-color: #f9f9f9;
  padding: 1px 3px;
  position: relative;
  font-size: 11px;
}
*/

.empty-cell {
  min-height: 32px;
  background-color: #f3f3f3;
  cursor: pointer;
}

.cell {
  border: 1px solid #ddd;
  padding: 4px;
  vertical-align: top;
  min-height: 24px; /* mais compacta, ajuste conforme necessário */
}

/*
.cell {
  cursor: pointer;
  vertical-align: top;
  padding: 2px;
  background-color: #f9f9f9;
  min-height: 20px;
  transition: all 0.2s ease;
}
*/
.cell:hover {
  background-color: #e0f7fa;
}

.cell.has-appointment {
  min-height: 60px; /* ou automático para ajustar ao conteúdo */
  padding: 4px;
}


.appointment {
  background-color: #d1e7dd; /* verde claro */
  color: #0f5132; /* verde escuro para o texto */
  border-radius: 4px;
  padding: 2px 4px;
  margin-bottom: 2px;
  font-size: 0.85em;
  margin-bottom: 2px;
}

/* Compromissos empilhados */
/*.appointment {
  background-color: #1976d2;
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 11px;
  text-align: left;
  margin-bottom: 2px;
  line-height: 1.2;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  white-space: normal;
  word-wrap: break-word;
}*/

.appointment:hover {
  background-color: #1565c0;
}

.week-navigation {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.week-label {
  font-weight: bold;
}

@media (max-width: 768px) {
  .cell {
    height: 10px;
    font-size: 9px;
  }

  .appointment {
    font-size: 10px;
    padding: 1px 4px;
  }
}


/* agenda.component.css */
/*.agenda-wrapper {
  overflow-x: auto;
  width: 100%;
}

.agenda {
  border-collapse: collapse;
  width: 100%;
  min-width: 800px;
}

.agenda th,
.agenda td {
  border: 1px solid #ccc;
  padding: 8px;
  text-align: center;
}

.cell {
  height: 60px;
  cursor: pointer;
  background-color: #f9f9f9;
}

.cell:hover {
  background-color: #e0f7fa;
}

.full-width {
  width: 100%;
}

@media (max-width: 768px) {
  .cell {
    height: 40px;
    font-size: 12px;
  }
}

.week-navigation {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.week-label {
  font-weight: bold;
}

.appointment {
  background-color: #1976d2; 
  color: white; 
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 14px;
  text-align: center;
  margin: 2px;
  cursor: pointer;
  transition: background-color 0.2s;
}

.appointment:hover {
  background-color: #1565c0;
}


.agenda-table {
  border-collapse: collapse;
  width: 100%;
}

.agenda-table th, .agenda-table td {
  border: 1px solid #ccc;
  padding: 8px;
  text-align: center;
}

.agenda-table th {
  background-color: #1565c0;
}


--------
.cell {
  cursor: pointer;
  height: 50px;
  vertical-align: top;
  padding: 4px;
}

.appointment {
  background-color: #1976d2;
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 14px;
  text-align: center;
  margin: 2px 0;
}
*/


td.cell {
  height: 32px;
  min-height: 32px;
  vertical-align: top;
  padding: 2px;
  border: 1px solid #ccc;
}

td.empty-cell {
  background-color: #f9f9f9;
}

td.cell:hover {
  background-color: #e6f0ff;
  cursor: pointer;
}

td.cell:hover .appointment {
  color: #faf7f7; /* preto */
/*  color: inherit;*/
}

/*novo*/
.cell {
  position: relative;
  padding-right: 20px; /* espaço pro botão */
}

.cell-add-button {
  position: absolute;
  bottom: 2px;
  right: 4px;
  font-size: 18px;
  color: #4caf50;
  cursor: pointer;
  display: none;
}

.cell:hover .cell-add-button {
  display: block;
}


/* div com css*/

.agenda-grid {
  display: grid;
  grid-template-columns: 80px repeat(7, 1fr); 
  grid-auto-rows: 60px; 
  gap: 1px;
  background: #ccc;
}

.header-cell {
  background: #eee;
  font-weight: bold;
  text-align: center;
  padding: 8px;
  border: 1px solid #ccc;
}

.hour-cell {
  background: #f8f8f8;
  text-align: center;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid #ccc;
}

.agenda-cell {
  background: #fff;
  border: 1px solid #ddd;
  padding: 4px;
  position: relative;
}

.cell-add-button {
  position: absolute;
  bottom: 4px;
  right: 4px;
  font-weight: bold;
  cursor: pointer;
  color: green;
}
/*
.appointment {
  background-color: #e0f7fa;
  border: 1px solid #0097a7;
  border-radius: 4px;
  padding: 4px;
  margin-bottom: 4px;
  cursor: grab;
}
*/

.appointment-dropzone {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.appointment {
  background-color: #e0f7fa;
  padding: 4px;
  border-radius: 4px;
  font-size: 12px;
  cursor: grab;
  box-shadow: 0 1px 2px rgba(0,0,0,0.2);
}


            <!--<span aria-hidden="true" style="position: absolute; left: -9999px">
              {{ hour }} | {{ minute }}
            </span>-->
            <!--<ng-template>{{ hour }}{{ minute }}</ng-template>-->
            <!-- <span style="font-size: 0px; color: gray">
              {{ hour }} | {{ minute }}
            </span>-->
            <!--<div>{{ hour }} : {{ minute }}</div> -->
            <!--  <span style="font-size: 10px; color: gray">
              {{ getDropListData(day, hour, minute) | json }}
            </span>     -->     



------------------------
<div class="row" cdkDropListGroup>
  <div *ngIf="appointments.length > 0" class="agenda-grid">
    <!-- Cabeçalho: dias da semana -->
    <div class="header-cell hour-cell">Horário</div>
    <div class="header-cell" *ngFor="let day of week">
      {{ day | date: 'EEE dd/MM' }}
    </div>

    <!-- Corpo: células da grade -->
    <ng-container *ngFor="let hour of hours; trackBy: trackByHour">
      <ng-container *ngFor="let minute of minutes; let i = index; trackBy: trackByMinute">
        <!-- Coluna da hora apenas na primeira linha do bloco de 6 -->
        <div *ngIf="i === 0" class="hour-cell" [attr.style]="'grid-row: span 6;'">
          {{ hour }}
        </div>

        <!-- Células por dia -->
        <div *ngFor="let day of week"
            class="agenda-cell"
            [ngClass]="{ 'empty-cell': !hasAppointment(day, hour, minute) }"
            (click)="isMobile && openAppointmentModal(day, hour, minute)">
            <!--{{ day | date: 'fullDate' }} | {{ day.getTime() }} -->
            <!-- {{ hour }} | {{ minute }} -->
          <div class="agenda-cell"
            cdkDropList
            class="appointment-dropzone"
            #dropListRef="cdkDropList"
            [cdkDropListData]="getDropListData(day, hour, minute)"
            (cdkDropListDropped)="onDrop($event)">
            <span style="opacity: 0; user-select: none; pointer-events: none;">
              {{ hour }} | {{ minute }}
            </span>
            <div *ngFor="let appt of getAppointments(day, hour, minute)"
                cdkDrag
                [cdkDragData]="{ appointment: appt, fromDay: day, fromHour: hour, fromMinute: minute }"
                class="appointment"
                (click)="editarCompromisso(appt); $event.stopPropagation()">
              <strong>{{ appt.aluno }}</strong><br />
              <strong>{{ appt.local }}</strong><br />
            </div>
          </div>

          <div *ngIf="!isMobile"
             class="cell-add-button"
            (click)="openAppointmentModal(day, hour, minute); $event.stopPropagation()">
            +
          </div>
        </div>
      </ng-container>
    </ng-container>
  </div>
</div>



Você pode interceptar as respostas com HttpInterceptor no Angular:

ts
Copiar
Editar
@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  constructor(private router: Router, private authService: AuthService) {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const authToken = this.authService.getToken();

    const authReq = req.clone({
      setHeaders: {
        Authorization: `Bearer ${authToken}`
      }
    });

    return next.handle(authReq).pipe(
      catchError((err: HttpErrorResponse) => {
        if (err.status === 403 || err.status === 401) {
          this.authService.logout(); // limpa o token
          this.router.navigate(['/login']);
        }
        return throwError(() => err);
      })
    );
  }
}